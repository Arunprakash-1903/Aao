datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = "" // Disable shadow database temporarily

}
//mysql://mwvhlumy_admin:Arun@2002@162.240.107.254:3306/mwvhlumy_AAO_db2
// /"mysql://mwvhlumy_admin:Arun@2002@162.240.107.254:3306/mwvhlumy_AAO_db2"
generator client {
  provider = "prisma-client-js"
}
enum UserRole {
  ADMIN
  USER
}
// model NATACourses{
//   id Int @id @default(autoincrement())
//   modules Course[]
// }
model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String?
  name             String?
  profilePicture   String?
  profileDocument  String?
  contactNumber    String?
  intro            String?
  subcribed        Boolean @default(false)
  profileDesignation String?
  role             UserRole   @default(USER)
  purchasedCourses Purchase[] // Many-to-many relationship via the Purchase model
  appiledJobs      Applyed[]
  
  

  workshopapplyed workshopapplyed[]
  fdpapplyed FDPapplyed[]
}
model Workshop{
  id               Int @id @default(autoincrement())
  slug             String?
  title            String?
  description      String? @db.VarChar(1000)
  body             String? @db.VarChar(2000)
  image            String?
  publishedAt      DateTime?  @default(now()) 
  
   



 workshopapplyed workshopapplyed[]
}
model FDP{
  id               Int @id @default(autoincrement())
  slug             String?
  title            String?
  description      String?
  body             String?
  image            String?
  publishedAt      DateTime?  @default(now()) 
  
   



 fdpapplyed FDPapplyed[]
}
model workshopapplyed{
   id               Int        @id @default(autoincrement())
   userId           Int
   workshopId       Int
    user       User    @relation(fields: [userId], references: [id])
    workshop        Workshop     @relation(fields: [workshopId], references: [id])

  @@unique([userId, workshopId]) // Ensure a user cannot purchase the same course twice


}
model FDPapplyed{
   id               Int        @id @default(autoincrement())
   userId           Int
   fdpId       Int
    user       User    @relation(fields: [userId], references: [id])
    fdp        FDP   @relation(fields: [fdpId], references: [id])

  @@unique([userId, fdpId]) // Ensure a user cannot purchase the same course twice


}
model Course {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime      @default(now())
  purchases   Purchase[]    // Many-to-many relationship via the Purchase model
  modules Module[]  // One-to-many relationship with Attachment
}

model Module {
  id         Int      @id @default(autoincrement())
  title      String
  
  
  courseId   Int
  attachments Attachments[]
  course     Course   @relation(fields: [courseId], references: [id])

  @@index([courseId]) // Optional for faster lookups by courseId
}
model Attachments{
  id Int  @id @default(autoincrement())
  title String
  url   String
  moduleId Int
  modules Module @relation(fields: [moduleId], references: [id])

}
model Purchase {
  id         Int     @id @default(autoincrement())
  userId     Int
  courseId   Int
  purchasedAt DateTime @default(now())

  user       User    @relation(fields: [userId], references: [id])
  course     Course  @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // Ensure a user cannot purchase the same course twice
}
model Job {
  id             Int      @id @default(autoincrement())
  jobTitle       String?
  jobDescription String?
  salary         String?
  
  location       String?
  Experience     String?
  company        String?
  
  company_about  String?
  email          String?

  jobType        String? 
  createdAt      DateTime @default(now())
 
  apilicants     Applyed[]
}
// model WorkshopApplyed{
//   id Int @id @default(autoincrement())
//   userId Int

// }
model Applyed{
  id Int         @id @default(autoincrement())
  userId Int
  jobId Int
  AppiledAt DateTime @default(now())

  user       User    @relation(fields: [userId], references: [id])
  job        Job     @relation(fields: [jobId], references: [id])

  @@unique([userId, jobId]) // Ensure a user cannot purchase the same course twice

}
enum JobType {
  Architech
  Faculty
  
  Internship
}